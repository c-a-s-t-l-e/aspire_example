[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(leaflet)\nlibrary(withr)\n\n# Example datasets\navailable_datasets <- list(\n  \"iris\" = iris,\n  \"mtcars\" = mtcars\n)\n\n# Define global reactive value\nglobal_filtered_data <- reactiveVal(NULL)\n\nui <- navbarPage(\n  theme = bs_theme(version = 5),\n  title = \"Data Explorer\",\n  \n  # Data Selection Tab\n  tabPanel(\n    \"Data Selection\",\n    page_sidebar(\n      sidebar = sidebar(\n        fileInput(\"file\", \"Upload CSV File\",\n                  accept = c(\"text/csv\",\n                             \"text/comma-separated-values,text/plain\",\n                             \".csv\")),\n        selectInput(\"dataset_choice\", \"Or Choose Example Dataset:\",\n                    choices = c(\"upload\", names(available_datasets))),\n        hr(),\n        h4(\"Filters\"),\n        uiOutput(\"dynamic_filters\")\n      ),\n      card(\n        card_header(\"Data Preview\"),\n        DTOutput(\"data_preview\"),\n        card_footer(\n          downloadButton(\"download_data\", \"Download Filtered Data\")\n        ),\n      ),\n      card(\n        card_header(\"Select Columns by Type\"),\n        uiOutput(\"column_selector_by_type\")\n      )\n    )\n  ),\n  \n  # Graph Generator Tab\n  tabPanel(\n    \"Graphs\",\n    page_sidebar(\n      # Replace the existing Graphs tabPanel sidebar content with:\n      sidebar = sidebar(\n        selectInput(\"plot_type\", \"Plot Type:\",\n                    choices = c(\"Scatter Plot\", \"Box Plot\", \"Histogram\", \"Bar Plot\")),\n        uiOutput(\"column_selector\"),\n        uiOutput(\"plot_options\"),\n        uiOutput(\"aesthetic_controls\"),  # New UI output for aesthetic controls\n        textInput(\"plot_title\", \"Plot Title:\", value = \"My Plot\"),\n        textInput(\"x_axis_label\", \"X-axis Label:\", value = \"X\"),\n        textInput(\"y_axis_label\", \"Y-axis Label:\", value = \"Y\"),\n        downloadButton(\"download_plot\", \"Download Plot\", class = \"btn-primary\")\n      ),\n      card(\n        card_header(\"Visualization\"),\n        plotOutput(\"plot\")\n      ),\n      card(\n        card_header(\"Statistical Analysis\"),\n        verbatimTextOutput(\"stats_tests\")\n      )\n    )\n  ),\n  # Report Generator Tab\n  tabPanel(\n    \"Report Generator\",\n    page_sidebar(\n      sidebar = sidebar(\n        textInput(\"report_title\", \"Report Title\", value = \"Data Analysis Report\"),\n        textAreaInput(\"report_description\", \"Report Description\", \n                      height = \"100px\",\n                      value = \"This report summarizes the analysis of our dataset.\"),\n        actionButton(\"save_current_plot\", \"Add Current Plot to Report\", class = \"btn-success\"),\n        hr(),\n        checkboxInput(\"include_stats\", \"Include Statistical Analysis\", TRUE),\n        actionButton(\"clear_report\", \"Clear Report\", class = \"btn-danger\"),\n        hr(),\n        downloadButton(\"download_report\", \"Download Report\", class = \"btn-primary\")\n      ),\n      card(\n        card_header(\"Report Preview\"),\n        card_body(\n          h2(textOutput(\"preview_title\")),\n          pre(style = \"white-space: pre-wrap; font-family: inherit;\", textOutput(\"preview_description\")),\n          hr(),\n          uiOutput(\"saved_plots_preview\"),\n          verbatimTextOutput(\"report_preview\")\n        )\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Reactive value to store the current dataset\n  current_data <- reactiveVal(NULL)\n  # Reactive value to store the filtered dataset\n  filtered_data <- reactiveVal(NULL)\n  \n  # Update data when file is uploaded or dataset is selected\n  observeEvent(list(input$dataset_choice, input$file), {\n    if (input$dataset_choice == \"upload\") {\n      if (!is.null(input$file)) {\n        data <- read.csv(input$file$datapath)\n        current_data(data)\n        filtered_data(data)\n        global_filtered_data(data)\n      }\n    } else {\n      data <- available_datasets[[input$dataset_choice]]\n      current_data(data)\n      filtered_data(data)\n      global_filtered_data(data)\n    }\n  })\n  \n  # Function to get columns grouped by type\n  get_columns_by_type <- reactive({\n    req(current_data())\n    data <- current_data()\n    \n    list(\n      numeric = names(data)[sapply(data, is.numeric)],\n      factor = names(data)[sapply(data, is.factor)],\n      character = names(data)[sapply(data, is.character)],\n      other = names(data)[!sapply(data, function(x) \n        is.numeric(x) || is.factor(x) || is.character(x))]\n    )\n  })\n  \n  # Render column selector grouped by type\n  # Add this output in the Data Selection tab's UI\n  output$column_selector_by_type <- renderUI({\n    req(current_data())\n    cols_by_type <- get_columns_by_type()\n    \n    tagList(\n      checkboxGroupInput(\"selected_numeric\", \"Numeric Columns:\",\n                         choices = cols_by_type$numeric,\n                         selected = cols_by_type$numeric),\n      checkboxGroupInput(\"selected_factor\", \"Factor Columns:\",\n                         choices = cols_by_type$factor,\n                         selected = cols_by_type$factor),\n      checkboxGroupInput(\"selected_character\", \"Character Columns:\",\n                         choices = cols_by_type$character,\n                         selected = cols_by_type$character),\n      checkboxGroupInput(\"selected_other\", \"Other Columns:\",\n                         choices = cols_by_type$other,\n                         selected = cols_by_type$other)\n    )\n  })\n  \n  # Combine all selected columns\n  # Update the selected_cols reactive\n  selected_cols <- reactive({\n    req(current_data())\n    unique(c(\n      input$selected_numeric,\n      input$selected_factor,\n      input$selected_character,\n      input$selected_other\n    ))\n  })\n  \n  # Update the observe block that applies filters\n  observe({\n    req(current_data())\n    data <- current_data()\n    cols <- selected_cols()\n    \n    if (length(cols) > 0) {\n      filtered <- data\n      \n      for (col in cols) {\n        filter_input <- input[[paste0(\"filter_\", col)]]\n        \n        if (!is.null(filter_input)) {\n          if (is.numeric(data[[col]])) {\n            filtered <- filtered[\n              filtered[[col]] >= filter_input[1] & \n                filtered[[col]] <= filter_input[2], , drop = FALSE\n            ]\n          } else if (is.factor(data[[col]]) || is.character(data[[col]])) {\n            if (length(filter_input) > 0) {\n              filtered <- filtered[filtered[[col]] %in% filter_input, , drop = FALSE]\n            }\n          }\n        }\n      }\n      \n      filtered_data(filtered)\n      global_filtered_data(filtered)\n    } else {\n      filtered_data(data)\n      global_filtered_data(data)\n    }\n  })\n  \n  # Generate dynamic filters\n  output$dynamic_filters <- renderUI({\n    req(current_data())\n    data <- current_data()\n    cols <- selected_cols()\n    \n    filters <- lapply(cols, function(col) {\n      if (is.numeric(data[[col]])) {\n        rng <- range(data[[col]], na.rm = TRUE)\n        sliderInput(\n          inputId = paste0(\"filter_\", col),\n          label = paste(\"Filter\", col),\n          min = rng[1],\n          max = rng[2],\n          value = rng\n        )\n      } else if (is.factor(data[[col]]) || is.character(data[[col]])) {\n        choices <- unique(data[[col]])\n        selectInput(\n          inputId = paste0(\"filter_\", col),\n          label = paste(\"Filter\", col),\n          choices = choices,\n          multiple = TRUE,\n          selected = choices\n        )\n      }\n    })\n    \n    tagList(filters)\n  })\n  \n  # Apply filters and update filtered data\n  observe({\n    req(current_data())\n    data <- current_data()\n    cols <- selected_cols()\n    \n    if (length(cols) > 0) {\n      filtered <- data[, cols, drop = FALSE]\n      \n      for (col in cols) {\n        filter_input <- input[[paste0(\"filter_\", col)]]\n        \n        if (!is.null(filter_input)) {\n          if (is.numeric(filtered[[col]])) {\n            filtered <- filtered[\n              filtered[[col]] >= filter_input[1] & \n                filtered[[col]] <= filter_input[2],\n            ]\n          } else if (is.factor(filtered[[col]]) || is.character(filtered[[col]])) {\n            if (length(filter_input) > 0) {\n              filtered <- filtered[filtered[[col]] %in% filter_input, ]\n            }\n          }\n        }\n      }\n      \n      filtered_data(filtered)\n      global_filtered_data(filtered)\n    } else {\n      filtered_data(data)\n      global_filtered_data(data)\n    }\n  })\n  \n  # Render data preview\n  output$data_preview <- renderDT({\n    req(filtered_data())\n    datatable(filtered_data(),\n              options = list(pageLength = 10,\n                             scrollX = TRUE))\n  })\n  \n  # Download handler for filtered data\n  output$download_data <- downloadHandler(\n    filename = function() {\n      paste0(\"filtered_data_\", Sys.Date(), \".csv\")\n    },\n    content = function(file) {\n      write.csv(filtered_data(), file, row.names = FALSE)\n    }\n  )\n  \n  # Graph tab functionality using filtered data\n  output$column_selector <- renderUI({\n    req(filtered_data())\n    data <- filtered_data()\n    num_cols <- names(data)[sapply(data, is.numeric)]\n    \n    tagList(\n      selectInput(\"x_var\", \"X Variable:\", choices = names(data)),\n      conditionalPanel(\n        condition = \"input.plot_type == 'Scatter Plot'\",\n        selectInput(\"y_var\", \"Y Variable:\", choices = num_cols)\n      )\n    )\n  })\n  \n  output$plot_options <- renderUI({\n    req(input$plot_type, filtered_data())\n    \n    if (input$plot_type == \"Histogram\") {\n      tagList(\n        sliderInput(\"bins\", \"Number of bins:\", min = 5, max = 50, value = 30),\n        checkboxInput(\"density\", \"Show density curve\", FALSE)\n      )\n    } else if (input$plot_type == \"Bar Plot\") {\n      checkboxInput(\"sort_bars\", \"Sort bars by frequency\", TRUE)\n    }\n  })\n  \n  output$aesthetic_controls <- renderUI({\n    req(filtered_data())\n    data <- filtered_data()\n    num_cols <- names(data)[sapply(data, is.numeric)]\n    cat_cols <- names(data)[sapply(data, function(x) is.factor(x) || is.character(x))]\n    \n    tagList(\n      selectInput(\"color_by\", \"Color by:\", \n                  choices = c(\"(None)\" = \"\", cat_cols)),\n      selectInput(\"size_by\", \"Size by:\", \n                  choices = c(\"(None)\" = \"\", num_cols)),\n      selectInput(\"facet_by\", \"Facet by:\", \n                  choices = c(\"(None)\" = \"\", cat_cols))\n    )\n  })\n  \n  current_plot <- reactive({\n    req(input$x_var, filtered_data())\n    data <- filtered_data()\n    \n    p <- switch(input$plot_type,\n                \"Scatter Plot\" = {\n                  req(input$y_var)\n                  p <- ggplot(data)\n                  \n                  # Build aesthetics based on selected options\n                  aes_list <- list(x = as.name(input$x_var), \n                                   y = as.name(input$y_var))\n                  \n                  if (input$color_by != \"\") {\n                    aes_list$color <- as.name(input$color_by)\n                  }\n                  if (input$size_by != \"\") {\n                    aes_list$size <- as.name(input$size_by)\n                  }\n                  \n                  p + do.call(aes, aes_list) +\n                    geom_point() +\n                    theme_minimal()\n                },\n                \"Box Plot\" = {\n                  p <- ggplot(data)\n                  \n                  # Build aesthetics for box plot\n                  aes_list <- list(y = as.name(input$x_var))\n                  if (input$color_by != \"\") {\n                    aes_list$x <- as.name(input$color_by)\n                    aes_list$fill <- as.name(input$color_by)\n                  }\n                  \n                  p + do.call(aes, aes_list) +\n                    geom_boxplot() +\n                    theme_minimal()\n                },\n                \"Histogram\" = {\n                  p <- ggplot(data)\n                  \n                  # Build aesthetics for histogram\n                  aes_list <- list(x = as.name(input$x_var))\n                  if (input$color_by != \"\") {\n                    aes_list$fill <- as.name(input$color_by)\n                  }\n                  \n                  p + do.call(aes, aes_list) +\n                    geom_histogram(bins = input$bins,\n                                   position = if(input$color_by != \"\") \"dodge\" else \"stack\") +\n                    theme_minimal()\n                },\n                \"Bar Plot\" = {\n                  if (is.numeric(data[[input$x_var]])) {\n                    p <- ggplot(data)\n                    \n                    # Build aesthetics for numeric bar plot\n                    aes_list <- list(x = as.name(input$x_var))\n                    if (input$color_by != \"\") {\n                      aes_list$fill <- as.name(input$color_by)\n                    }\n                    \n                    p + do.call(aes, aes_list) +\n                      geom_bar(position = if(input$color_by != \"\") \"dodge\" else \"stack\") +\n                      theme_minimal()\n                  } else {\n                    # For categorical variables, count first\n                    if (input$color_by != \"\") {\n                      data_summary <- data %>%\n                        count(across(all_of(c(input$x_var, input$color_by))))\n                    } else {\n                      data_summary <- data %>%\n                        count(across(all_of(input$x_var)))\n                    }\n                    \n                    # Order levels by frequency if not colored\n                    if (input$color_by == \"\") {\n                      data_summary[[input$x_var]] <- factor(\n                        data_summary[[input$x_var]],\n                        levels = data_summary[[input$x_var]][order(data_summary$n, decreasing = TRUE)]\n                      )\n                    }\n                    \n                    p <- ggplot(data_summary)\n                    \n                    # Build aesthetics for categorical bar plot\n                    aes_list <- list(x = as.name(input$x_var), y = as.name(\"n\"))\n                    if (input$color_by != \"\") {\n                      aes_list$fill <- as.name(input$color_by)\n                    }\n                    \n                    p + do.call(aes, aes_list) +\n                      geom_col(position = if(input$color_by != \"\") \"dodge\" else \"stack\") +\n                      theme_minimal()\n                  }\n                }\n    )\n    \n    # Add faceting if selected\n    if (input$facet_by != \"\") {\n      p <- p + facet_wrap(as.formula(paste(\"~\", input$facet_by)))\n    }\n    \n    # Add labels and theme\n    p + labs(title = input$plot_title,\n             x = input$x_axis_label,\n             y = input$y_axis_label) +\n      theme(plot.title = element_text(hjust = 0.5),\n            axis.text.x = element_text(angle = 45, hjust = 1))\n  })\n  \n  # Display plot\n  output$plot <- renderPlot({\n    print(current_plot())\n  })\n  \n  # Download handler for the plot\n  output$download_plot <- downloadHandler(\n    filename = function() {\n      paste0(\"plot_\", format(Sys.time(), \"%Y%m%d_%H%M%S\"), \".png\")\n    },\n    content = function(file) {\n      ggsave(file, plot = current_plot(), width = 10, height = 7, dpi = 300)\n    }\n  )\n  \n  # Statistical calculations\n  stats_calculations <- reactive({\n    req(input$x_var, filtered_data())\n    data <- filtered_data()\n    \n    # Initialize results\n    results <- list()\n    \n    # Basic summary statistics\n    results$summary <- summary(data[[input$x_var]])\n    \n    # Initialize output text with both simple and technical interpretations\n    output_text <- c(\n      \"Quick Summary:\",\n      paste(capture.output(results$summary), collapse = \"\\n\"),\n      \"\\nSimple Interpretation:\",\n      if(is.numeric(data[[input$x_var]])) {\n        paste(\"Most values of\", input$x_var, \"are around\",\n              round(mean(data[[input$x_var]], na.rm = TRUE), 2),\n              \". The lowest value is\",\n              round(min(data[[input$x_var]], na.rm = TRUE), 2),\n              \"and the highest is\",\n              round(max(data[[input$x_var]], na.rm = TRUE), 2), \".\"\n        )\n      } else {\n        paste(\"This data contains\", length(unique(data[[input$x_var]])),\n              \"different categories.\")\n      },\n      \"\\nTechnical Details:\",\n      if(is.numeric(data[[input$x_var]])) {\n        paste(\"Mean:\", round(mean(data[[input$x_var]], na.rm = TRUE), 2),\n              \"| SD:\", round(sd(data[[input$x_var]], na.rm = TRUE), 2),\n              \"| Range:\", round(min(data[[input$x_var]], na.rm = TRUE), 2),\n              \"to\", round(max(data[[input$x_var]], na.rm = TRUE), 2))\n      } else {\n        paste(\"Categorical variable with\",\n              length(unique(data[[input$x_var]])), \"unique values\")\n      }\n    )\n    \n    # Shapiro-Wilk test for numeric data\n    if (is.numeric(data[[input$x_var]]) && length(data[[input$x_var]]) >= 3) {\n      results$shapiro <- tryCatch(\n        shapiro.test(data[[input$x_var]]),\n        error = function(e) NULL\n      )\n      \n      if (!is.null(results$shapiro)) {\n        simple_shapiro <- if(results$shapiro$p.value < 0.05) {\n          \"The data is not normally distributed (bell-shaped).\"\n        } else {\n          \"The data follows a normal (bell-shaped) distribution.\"\n        }\n        \n        technical_shapiro <- if(results$shapiro$p.value < 0.05) {\n          \"Significantly deviates from normality (p < 0.05). Consider non-parametric methods.\"\n        } else {\n          \"Normal distribution (p >= 0.05). Parametric tests appropriate.\"\n        }\n        \n        output_text <- c(output_text,\n                         \"\\nDistribution Check:\",\n                         paste(\"Simple:\", simple_shapiro),\n                         paste(\"Technical:\", technical_shapiro),\n                         paste(\"Test Statistics: W =\", round(results$shapiro$statistic, 4),\n                               \", p-value =\", format.pval(results$shapiro$p.value)))\n      }\n    }\n    \n    # Scatter plot specific tests\n    if (input$plot_type == \"Scatter Plot\" && !is.null(input$y_var)) {\n      results$correlation <- tryCatch(\n        cor.test(data[[input$x_var]], data[[input$y_var]]),\n        error = function(e) NULL\n      )\n      \n      if (!is.null(results$correlation)) {\n        cor_strength <- abs(results$correlation$estimate)\n        cor_interpretation <- case_when(\n          cor_strength >= 0.7 ~ \"strong\",\n          cor_strength >= 0.3 ~ \"moderate\",\n          TRUE ~ \"weak\"\n        )\n        \n        # Simple interpretation\n        direction <- if(results$correlation$estimate > 0)\n          \"as one increases, the other tends to increase\"\n        else\n          \"as one increases, the other tends to decrease\"\n        \n        simple_cor <- paste(\"There is a\", cor_interpretation, \"relationship:\", direction, \".\",\n                            if(results$correlation$p.value < 0.05)\n                              \"This pattern is reliable.\"\n                            else\n                              \"This pattern might be by chance.\")\n        \n        # Technical interpretation\n        technical_cor <- paste(\n          \"Correlation coefficient (r) =\", round(results$correlation$estimate, 4),\n          sprintf(\"(p %s 0.05)\", ifelse(results$correlation$p.value < 0.05, \"<\", \"≥\"))\n        )\n        \n        output_text <- c(output_text,\n                         \"\\nRelationship Analysis:\",\n                         paste(\"Simple:\", simple_cor),\n                         paste(\"Technical:\", technical_cor))\n      }\n      \n      # Regression analysis\n      results$regression <- tryCatch(\n        summary(lm(data[[input$y_var]] ~ data[[input$x_var]])),\n        error = function(e) NULL\n      )\n      \n      if (!is.null(results$regression)) {\n        # Simple interpretation\n        simple_reg <- paste(\"This relationship can explain\",\n                            round(results$regression$r.squared * 100, 0),\n                            \"% of the changes in\", input$y_var, \".\")\n        \n        # Technical interpretation\n        technical_reg <- paste(\n          \"R² =\", round(results$regression$r.squared, 4),\n          \"| Adj.R² =\", round(results$regression$adj.r.squared, 4),\n          \"| Slope =\", round(results$regression$coefficients[2,1], 4),\n          sprintf(\"(p %s 0.05)\", ifelse(results$regression$coefficients[2,4] < 0.05, \"<\", \"≥\"))\n        )\n        \n        output_text <- c(output_text,\n                         \"\\nPredictive Analysis:\",\n                         paste(\"Simple:\", simple_reg),\n                         paste(\"Technical:\", technical_reg))\n      }\n    }\n    \n    # Distribution shape analysis for histograms\n    if (input$plot_type == \"Histogram\" && is.numeric(data[[input$x_var]])) {\n      skewness <- (sum((data[[input$x_var]] - mean(data[[input$x_var]]))^3) /\n                     (length(data[[input$x_var]]) * sd(data[[input$x_var]])^3))\n      \n      # Simple interpretation\n      simple_skew <- case_when(\n        abs(skewness) < 0.5 ~ \"values are spread evenly around the middle\",\n        skewness >= 0.5 ~ \"there are more low values with some high outliers\",\n        skewness <= -0.5 ~ \"there are more high values with some low outliers\"\n      )\n      \n      # Technical interpretation\n      technical_skew <- case_when(\n        abs(skewness) < 0.5 ~ \"approximately symmetric\",\n        skewness >= 0.5 ~ \"right-skewed (positively skewed)\",\n        skewness <= -0.5 ~ \"left-skewed (negatively skewed)\"\n      )\n      \n      output_text <- c(output_text,\n                       \"\\nShape Analysis:\",\n                       paste(\"Simple: In this dataset,\", simple_skew, \".\"),\n                       paste(\"Technical: Distribution is\", technical_skew,\n                             \"(skewness =\", round(skewness, 4), \")\"))\n    }\n    \n    paste(output_text, collapse = \"\\n\")\n  })\n  \n  # Render statistical analysis\n  output$stats_tests <- renderText({\n    stats_calculations()\n  })\n  \n  # Store saved plots and their descriptions\n  saved_plots <- reactiveVal(list())\n  \n  # Clear report\n  observeEvent(input$clear_report, {\n    saved_plots(list())\n    showNotification(\"Report cleared\", type = \"message\")\n  })\n  \n  # When save button is clicked, save current plot and stats\n  observeEvent(input$save_current_plot, {\n    req(current_plot())\n    \n    # Create a new plot entry\n    new_plot <- list(\n      plot = current_plot(),\n      title = input$plot_title,\n      type = input$plot_type,\n      variables = list(\n        x = input$x_var,\n        y = if(!is.null(input$y_var)) input$y_var else NULL\n      ),\n      stats = stats_calculations()\n    )\n    \n    # Add to saved plots\n    current_saved <- saved_plots()\n    saved_plots(c(current_saved, list(new_plot)))\n    \n    showNotification(\"Plot added to report\", type = \"message\")\n  })\n  \n  # Generate report preview\n  output$saved_plots_preview <- renderUI({\n    plots <- saved_plots()\n    \n    if (length(plots) == 0) {\n      return(p(\"No plots saved yet. Create plots in the Graphs tab and click 'Add Current Plot to Report' to include them here.\"))\n    }\n    \n    plot_previews <- lapply(seq_along(plots), function(i) {\n      card(\n        card_header(\n          paste0(\"Plot \", i, \": \", plots[[i]]$title)\n        ),\n        plotOutput(paste0(\"saved_plot_\", i)),\n        if(input$include_stats) {\n          verbatimTextOutput(paste0(\"saved_stats_\", i))\n        }\n      )\n    })\n    \n    # Render each saved plot\n    for(i in seq_along(plots)) {\n      local({\n        local_i <- i\n        output[[paste0(\"saved_plot_\", local_i)]] <- renderPlot({\n          plots[[local_i]]$plot\n        })\n        if(input$include_stats) {\n          output[[paste0(\"saved_stats_\", local_i)]] <- renderText({\n            plots[[local_i]]$stats\n          })\n        }\n      })\n    }\n    \n    do.call(tagList, plot_previews)\n  })\n  \n  # Preview report title\n  output$preview_title <- renderText({\n    input$report_title\n  })\n  \n  # Preview report description\n  output$preview_description <- renderText({\n    input$report_description\n  })\n  \n  # Download report handler\n  output$download_report <- downloadHandler(\n    filename = function() {\n      paste0(\"analysis_report_\", format(Sys.time(), \"%Y%m%d_%H%M%S\"), \".html\")\n    },\n    content = function(file) {\n      # Create a temporary directory within the session temp dir\n      temp_dir <- tempfile()\n      dir.create(temp_dir, showWarnings = FALSE)\n      on.exit(unlink(temp_dir, recursive = TRUE))\n      \n      plots <- saved_plots()\n      \n      # Create an images subdirectory\n      img_dir <- file.path(temp_dir, \"images\")\n      dir.create(img_dir, showWarnings = FALSE)\n      \n      # Save plots as images\n      plot_files <- character(length(plots))\n      if (length(plots) > 0) {\n        for (i in seq_along(plots)) {\n          plot_files[i] <- file.path(\"images\", paste0(\"plot_\", i, \".png\"))\n          ggsave(\n            file.path(temp_dir, plot_files[i]),\n            plots[[i]]$plot,\n            width = 10,\n            height = 7,\n            dpi = 300\n          )\n        }\n      }\n      \n      # Create the Rmd content\n      # Create the Rmd content\n      rmd_content <- c(\n        \"---\",\n        paste0('title: \"', input$report_title, '\"'),\n        'date: \"`r format(Sys.time(), \\'%B %d, %Y\\')`\"',  # Fixed date line\n        'output:',\n        '  html_document:',\n        '    self_contained: true',\n        '    toc: true',\n        '    toc_float: true',\n        '    theme: cosmo',\n        '    highlight: tango',\n        \"---\",\n        \"\",\n        gsub(\"\\\\n\", \"  \\n\", input$report_description),\n        \"\",\n        if(input$include_data_summary) {\n          c(\n            \"## Data Summary\",\n            \"### Dataset Overview\",\n            paste(\"- Number of observations:\", nrow(filtered_data())),\n            paste(\"- Number of variables:\", ncol(filtered_data())),\n            \"\",\n            \"### Variable Summary\",\n            sapply(names(filtered_data()), function(col) {\n              c(\n                paste(\"####\", col),\n                if(is.numeric(filtered_data()[[col]])) {\n                  c(\n                    paste(\"- Type: Numeric\"),\n                    paste(\"- Mean:\", round(mean(filtered_data()[[col]], na.rm = TRUE), 2)),\n                    paste(\"- Median:\", round(median(filtered_data()[[col]], na.rm = TRUE), 2)),\n                    paste(\"- Standard Deviation:\", round(sd(filtered_data()[[col]], na.rm = TRUE), 2)),\n                    paste(\"- Range:\", paste(round(range(filtered_data()[[col]], na.rm = TRUE), 2), collapse = \" to \"))\n                  )\n                } else {\n                  c(\n                    paste(\"- Type:\", class(filtered_data()[[col]])),\n                    paste(\"- Unique values:\", length(unique(filtered_data()[[col]]))),\n                    paste(\"- Most common:\", names(sort(table(filtered_data()[[col]]), decreasing = TRUE)[1]))\n                  )\n                }\n              )\n            }),\n            \"\"\n          )\n        },\n        if(length(plots) > 0) {\n          unlist(lapply(seq_along(plots), function(i) {\n            c(\n              paste(\"##\", plots[[i]]$title),\n              paste0(\"![](\", plot_files[i], \")\"),\n              if(input$include_stats) {\n                c(\"Statistical Analysis \\n\\n\", \n                  strsplit(plots[[i]]$stats, \"\\n\")[[1]])\n              },\n              \"\"\n            )\n          }))\n        }\n      )\n      \n      # Write Rmd content to file\n      rmd_file <- file.path(temp_dir, \"report.Rmd\")\n      writeLines(paste(rmd_content, collapse = \"\\n\"), rmd_file)\n      \n      # Set working directory temporarily to temp_dir\n      withr::with_dir(temp_dir, {\n        # Render with explicit options\n        rmarkdown::render(\n          \"report.Rmd\",\n          output_file = file,\n          quiet = TRUE,\n          encoding = \"UTF-8\"\n        )\n      })\n    },\n    contentType = \"text/html\"\n  )\n}\n\nshinyApp(ui, server)","type":"text"}]
